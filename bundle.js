(function (React$1, ReactDOM, d3$1, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);


    React$1.useEffect(() => {
      d3$1.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
      	setData({
          land: topojson.feature(topology, land),
        	interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);
    
    return data;
  };

  const csvUrl =
    'https://gist.githubusercontent.com/andre6639/c40b02a85c7362bc1237b530f7988ff0/raw/c3da73ab6ba569a97f906c2a559ad2dddc2de050/MissingMigrants-ConciseGlobal-2020-11-04T23-14-14.csv';

  const row = (d) => {
    d.coords = d['Location Coordinates']
      .split(',')
      .map((d) => +d)
      .reverse();
    d['Total Dead and Missing'] = +d['Total Dead and Missing'];
    d['Reported Date'] = new Date(d['Reported Date']);
    return d;
  };

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3$1.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const projection = d3.geoEqualEarth();
  const path = d3.geoPath(projection);
  const graticule = d3$1.geoGraticule();

  const Marks = ({
    worldAtlas: { land, interiors },
    data,
    sizeScale,
    sizeValue,
  }) => (
    React.createElement( 'g', { className: "marks" },
      React.createElement( 'path', { className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', { className: "graticules", d: path(graticule()) }),
      land.features.map((feature) => (
        React.createElement( 'path', { className: "land", d: path(feature) })
      )),
      React.createElement( 'path', { className: "interiors", d: path(interiors) }),
      data.map((d) => {
        const [x, y] = projection(d.coords);
        return React.createElement( 'circle', { cx: x, cy: y, r: sizeScale(sizeValue(d)) })
      })
    )
  );

  const BubbleMap = ({ data, worldAtlas }) => {
    const sizeValue = (d) => d['Total Dead and Missing'];
    const maxRadius = 15;

    const sizeScale = d3$1.scaleSqrt()
      .domain([0, d3$1.max(data, sizeValue)])
      .range([0, maxRadius]);

    return (
      React$1__default.createElement( Marks, {
        worldAtlas: worldAtlas, data: data, sizeScale: sizeScale, sizeValue: sizeValue })
    );
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>
    yScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks$1 = ({
    binnedData,
    xScale,
    yScale,
    xValue,
    yValue,
    tooltipFormat,
    circleRadius,
    innerHeight,
  }) =>
    binnedData.map((d) => (
      React.createElement( 'rect', {
        className: "mark", x: xScale(d.x0), y: yScale(d.y), width: xScale(d.x1) - xScale(d.x0), height: innerHeight - yScale(d.y) },
        React.createElement( 'title', null, tooltipFormat(d.y) )
      )
    ));

  const margin = { top: 0, right: 30, bottom: 20, left: 50 };

  const xAxisLabelOffset = 80;
  const yAxisLabelOffset = 30;

  const DateHistogram = ({
    data,
    width,
    height,
    setBrushExtent,
    xValue,
  }) => {
    const xAxisLabel = 'Time';

    const yValue = (d) => d['Total Dead and Missing'];
    const yAxisLabel = 'Total Dead and Missing';

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    //       d['Total Dead and Missing'] = +d['Total Dead and Missing'];
    //       d['Reported Date'] = new Date(d['Reported Date']);

    const xAxisTickFormat = d3$1.timeFormat('%m/%d/%Y');

    const xScale = d3$1.scaleTime()
      .domain(d3$1.extent(data, xValue))
      .range([0, innerWidth])
      .nice();

    const [start, stop] = xScale.domain();

    const binnedData = d3$1.histogram()
      .value(xValue)
      .domain(xScale.domain())
      .thresholds(d3$1.timeMonths(start, stop))(data)
      .map((array) => ({
        y: d3$1.sum(array, yValue),
        x0: array.x0,
        x1: array.x1,
      }));

    const yScale = d3$1.scaleLinear()
      .domain([0, d3$1.max(binnedData, (d) => d.y)])
      .range([innerHeight, 0]);

    const brushRef = React$1.useRef();

    React$1.useEffect(() => {
      const brush = d3$1.brushX().extent([
        [0, 0],
        [innerWidth, innerHeight],
      ]);
      brush(d3$1.select(brushRef.current));
      brush.on('brush end', () => {
        setBrushExtent(d3$1.event.selection && d3$1.event.selection.map(xScale.invert));
      });
    }, [innerWidth, innerHeight]);

    return (
      React.createElement( React.Fragment, null,
        React.createElement( 'rect', { width: width, height: height, fill: "white" }),
        React.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          React.createElement( AxisBottom, {
            xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 5 }),
          React.createElement( 'text', {
            className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${
            innerHeight / 2
          }) rotate(-90)` },
            yAxisLabel
          ),
          React.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 5 }),
          React.createElement( 'text', {
            className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
            xAxisLabel
          ),
          React.createElement( Marks$1, {
            binnedData: binnedData, xScale: xScale, yScale: yScale, tooltipFormat: (d) => d, circleRadius: 2, innerHeight: innerHeight }),
          React.createElement( 'g', { ref: brushRef })
        )
      )
    );
  };

  // import {  } from 'd3';

  const width = 960;
  const height = 500;
  const dateHistogramSize = 0.224;

  const xValue = d => d['Reported Date'];

  const App = () => {
    const worldAtlas = useWorldAtlas();
    const data = useData();
    const [brushExtent, setBrushExtent] = React$1.useState();

    if (!worldAtlas || !data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    const filteredData = brushExtent ? data.filter(d => {
      const date = xValue(d);
      return date > brushExtent[0] && date < brushExtent[1];
    }) : data;

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( BubbleMap, { data: filteredData, worldAtlas: worldAtlas }),
        React$1__default.createElement( 'g', { transform: `translate(0, ${height - dateHistogramSize * height})` },
          React$1__default.createElement( DateHistogram, {
            data: data, width: width, height: dateHistogramSize * height, setBrushExtent: setBrushExtent, xValue: xValue })
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,